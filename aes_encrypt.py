import argparse

s_box = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
        0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
        0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
        0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
        0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
        0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
        0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
        0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
        0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
        0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
        0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
        0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
        0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
        0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
        0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
        0x54, 0xbb, 0x16]

inverted_s_box = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
        0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
        0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
        0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
        0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
        0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
        0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
        0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
        0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
        0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
        0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
        0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
        0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73 , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
        0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
        0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
        0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
        0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
        0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
        0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
        0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
        0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
        0x21, 0x0c, 0x7d]

state = [None]*16
rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
key_schedule = None
keySchedule = [[0,0,0,0]]*60

#  Galouis Field multiplication look up table
g_mul2 = [0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
        0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
        0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
        0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
        0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
        0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
        0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
        0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
        0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
        0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5]

g_mul3 = [0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
		0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
		0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
		0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
		0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
		0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
		0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
		0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
		0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
		0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
		0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
		0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
		0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
		0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
		0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
		0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a]

def get_sub_word(temp):
    return [s_box[temp[0]], s_box[temp[1]], s_box[temp[2]], s_box[temp[3]]]

def xor(temp, w):
    arr = [00,00,00,00]
    for i in range(4):
        arr[i] = temp[i] ^ w[i]
    return arr

def fill_first_round(key, size):
    if(size == 256):
        num_words = 8
    else:
        num_words = 4
    max_range = num_words + 1
    
    for i in range(1, max_range):
        key_schedule[i-1] = key[num_words*(i-1):num_words*i]

def key_expansion_128(orig0, orig1, orig2, orig3, round):
    global key_schedule
    global keySchedule
    # Rotation
    temp0 = [orig3[1], orig3[2], orig3[3], orig3[0]]
    temp0 = get_sub_word(temp0)

    temp0[0] = temp0[0] ^ rcon[round]
    temp0 = xor(temp0, orig0)
    temp1 = xor(temp0, orig1)
    temp2 = xor(temp1, orig2)
    temp3 = xor(temp2, orig3)

    offset = 4*(round+1)
    key_schedule[offset] = temp0
    key_schedule[offset + 1] = temp1
    key_schedule[offset + 2] = temp2
    key_schedule[offset + 3] = temp3
    if(round < 9):
        key_expansion_128(temp0, temp1, temp2, temp3, round+1)
    else:
        i = 0
        j = 0
        for x in key_schedule[4:]:
            for y in x:
                keySchedule[i][j]=hex(y)
                j = j+1
            j = 0
            i = i+1


def key_expansion_256(orig0, orig1, orig2, orig3, orig4, orig5, orig6, orig7, round):
    global key_schedule
    global keySchedule
    
    # Rotation
    temp0 = [orig3[1], orig3[2], orig3[3], orig3[0]]
    temp0 = get_sub_word(temp0)

    temp0[0] = temp0[0] ^ rcon[round]
    temp0 = xor(temp0, orig0)
    temp1 = xor(temp0, orig1)
    temp2 = xor(temp1, orig2)
    temp3 = xor(temp2, orig3)
    if(round < 6):
        temp4 = xor(temp3, orig4)
        temp5 = xor(temp4, orig5)
        temp6 = xor(temp5, orig6)
        temp7 = xor(temp6, orig7)

    offset = 8*(round+1)
    key_schedule[offset] = temp0
    key_schedule[offset + 1] = temp1
    key_schedule[offset + 2] = temp2
    key_schedule[offset + 3] = temp3
    if(round < 6):
        key_schedule[offset + 4] = temp4
        key_schedule[offset + 5] = temp5
        key_schedule[offset + 6] = temp6
        key_schedule[offset + 7] = temp7
        key_expansion_256(temp0, temp1, temp2, temp3, temp4, temp5, temp6, temp7, round+1)
    else:
        i = 0
        j = 0
        for x in key_schedule[4:]:
            for y in x:
                keySchedule[i][j]=hex(y)
                j = j+1
            j = 0
            i = i+1
    
def get_stateHex(state):
    stateHex = []
    for i in state:
        j = hex(i)
        stateHex.append(j)
    return stateHex


def sub_bytes(state):
    for i in range(16):
        state[i] = hex(s_box[state[i]])
    print ("substituted state: ", state)
    print()

def shift_rows(state):
    temp = [None]*16

    temp[0] = state[0]
    temp[1] = state[5]
    temp[2] = state[10]
    temp[3] = state[15]

    temp[4] = state[4]
    temp[5] = state[9]
    temp[6] = state[14]
    temp[7] = state[3]
    
    temp[8] = state[8]
    temp[9] = state[13]
    temp[10] = state[2]
    temp[11] = state[7]
    
    temp[12] = state[12]
    temp[13] = state[1]
    temp[14] = state[6]
    temp[15] = state[11]

    for i in range(16):
        state[i] = temp[i]
    print("shift_rows: ",state)
    print()

def mix_columns(state):
    temp = [None]*16

    for i in range(16):
    	state[i] = int(state[i],0)

    temp[0] = g_mul2[state[0]] ^ g_mul3[state[1]] ^ state[2] ^ state[3]
    temp[1] = state[0] ^ g_mul2[state[1]] ^ g_mul3[state[2]] ^ state[3]
    temp[2] = state[0] ^ state[1] ^ g_mul2[state[2]] ^ g_mul3[state[3]]
    temp[3] = g_mul3[state[0]] ^ state[1] ^ state[2] ^ g_mul2[state[3]]

    temp[4] = g_mul2[state[4]] ^ g_mul3[state[5]] ^ state[6] ^ state[7]
    temp[5] = state[4] ^ g_mul2[state[5]] ^ g_mul3[state[6]] ^ state[7]
    temp[6] = state[4] ^ state[5] ^ g_mul2[state[6]] ^ g_mul3[state[7]]
    temp[7] = g_mul3[state[4]] ^ state[5] ^ state[6] ^ g_mul2[state[7]]
    
    temp[8] = g_mul2[state[8]] ^ g_mul3[state[9]] ^ state[10] ^ state[11]
    temp[9] = state[8] ^ g_mul2[state[9]] ^ g_mul3[state[10]] ^ state[11]
    temp[10] = state[8] ^ state[9] ^ g_mul2[state[10]] ^ g_mul3[state[11]]
    temp[11] = g_mul3[state[8]] ^ state[9] ^ state[10] ^ g_mul2[state[11]]
    
    temp[12] = g_mul2[state[12]] ^ g_mul3[state[13]] ^ state[14] ^ state[15]
    temp[13] = state[12] ^ g_mul2[state[13]] ^ g_mul3[state[14]] ^ state[15]
    temp[14] = state[12] ^ state[13] ^ g_mul2[state[14]] ^ g_mul3[state[15]]
    temp[15] = g_mul3[state[12]] ^ state[13] ^ state[14] ^ g_mul2[state[15]]

    for i in range(16):
    	temp[i] = hex(temp[i])

    for i in range(16):
        state[i] = temp[i]
    print ("mix_columns: ", state)
    print()

def add_round_key_init(roundkey):
    stateCheck = [None]*16
    
    for i in range(16):
       state[i] ^= roundkey[i]
    for i in range(16):
        stateCheck[i] = hex(state[i])
    print("add_round_key_init: ", stateCheck)
    print()

def add_round_key(states, roundkey):
    # print("roundkey: ", roundkey)
    roundkeyInt = [None]*16
    stateInt = [None]*16
    stateHex = [None]*16

    for i in range(16):
        stateInt[i] = int(states[i],16)
    for i in range(16):
        roundkeyInt[i] = int(roundkey[i],16)

    for i in range(16):
       stateInt[i] ^= roundkeyInt[i]

    for i in range(16):
        state[i] = hex(stateInt[i])

    print ("add_round_key: ",state)
    print()
    print()
    

def get_sub_keys(key_list):
    key = []
    for i in key_list:
        for j in i:
            key.append(j)
    return key

def get_stateInt(state):
    stateInt = []
    for i in state:
        if(type(i) == int):
            return state
        else:            
            j = int(i,0)
            stateInt.append(j)
    return stateInt

def aes_encrypt(message, key, keysize):
    global key_schedule
    global state
    stateInt = [None]*16
    for i in range(16):
        state[i] = message[i]

    #print("Empty key schedule:")
    #for x in key_schedule:
    #    print(x)
    num_rounds = 9
    print("Starting")
    print()
    print("KEYSIZE IS " + str(keysize))
    if(keysize == str(128)):
        key_schedule = [[00, 00, 00, 00]]*44
        fill_first_round(key, keysize)
        key_expansion_128(key[0:4], key[4:8], key[8:12], key[12:], 0)
    else:
        key_schedule = [[00, 00, 00, 00]]*60
        fill_first_round(key, keysize)
        key_expansion_256(key[0:4], key[4:8], key[8:12], key[12:16], key[16:20], key[20:24], key[24:28], key[28:], 0)
    add_round_key_init(key)

    for i in range(0,num_rounds*4,4):
        stateInt = get_stateInt(state)
        sub_bytes(stateInt)
        shift_rows(stateInt)
        mix_columns(stateInt)
        key = get_sub_keys(keySchedule[i:i+4])
        add_round_key(stateInt, key)

    # final round
    stateInt = get_stateInt(state)
    sub_bytes(stateInt)
    shift_rows(stateInt)
    key = get_sub_keys(keySchedule[36:40])
    add_round_key(stateInt, key)
    print("End of encryption")

def main():    
    parser = argparse.ArgumentParser()
    parser.add_argument("--keysize")
    parser.add_argument("--keyfile")
    parser.add_argument("--inputfile")
    parser.add_argument("--outputfile")
    parser.add_argument("--mode")

    args = parser.parse_args()
    keysize = args.keysize
    # print(keysize)
    
    keyfile = args.keyfile
    key = open(keyfile, "rb").read()
    # print("key: ", key)

    inputfile = args.inputfile
    data = open(inputfile, "rb").read()
    # print("inputfile: ", data)

    # print(args.outputfile)
    # print(args.mode)   

    aes_encrypt(data, key, keysize)  
    


if __name__ == '__main__':
    main()


# python3 aes_encrypt.py --keysize 128 --keyfile keyfile2 --inputfile inputfile2
